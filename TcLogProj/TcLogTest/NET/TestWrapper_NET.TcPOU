<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="TestWrapper_NET" Id="{b95f26a9-ba1e-45bd-8717-c0be8c66e163}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK TestWrapper_NET
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	CoreLogger	:	TcLogCore(nBufferSize := 50*50*280);
	Logger		:	TcLog;
	bFlushCache :   BOOL;
	
	// Test drivers
	fbTime: GenerateTimeData;
	fbSetSystemTime : NT_SetLocalTime;
	Set_system_time : BOOL;
	System_time : STRING;
	ActualTime : STRING;
	Cycles: INT;
	i: INT;
	
	// Exchanged variables with .NET tests
	filePath	:	STRING;
	fileName	:	STRING;
	delimiter	:	STRING(1);
	
	Persist_simple_error_message_run : BOOL;
	Persist_simple_error_message_data: STRING;
	
	Persist_long_error_message_run : BOOL;
	Persist_long_error_message_data: T_MaxString;
	
	Do_not_persist_logs_below_log_level_run : BOOL;
	
	Log_message_contains_instance_path_run : BOOL;
	
	Log_message_uses_correct_delimiter_run : BOOL;
	Log_message_uses_correct_delimiter_data: STRING;
	
	Log_message_contains_custom_formatted_timestamp_run : BOOL;
	
	Delete_logs_if_expired_run : BOOL;
	
	New_logfile_is_created_if_rolling_interval_rolls_run : BOOL;

	Same_log_file_is_used_until_rolling_interval_rolls : BOOL;	
	
	Log_in_consecutive_cycles: BOOL;
	Number_of_log_cycles : DINT;
	
	Log_multiple_logs_in_one_cycle: BOOL;
	Number_of_logs_per_cycle: DINT;
	
	Log_multiple_logs_in_multiple_cycles: BOOL;
	Number_of_cycles: DINT;
	CycleCount: DINT := 1;
	
	Persistance_time_stays_within_bounds: BOOL;
	Duration_in_cylces: DINT := 1;
	Persistance_time_stays_within_bounds_F_TRIG: F_TRIG;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// ****** U N I T   T E S T S ******




// Set up TcLog
CoreLogger
	.IncludeInstancePath()
	.MinimumLevel(E_LogLevel.Warning)
	.SetDelimiter(delimiter)
	.SetRollingInterval(E_RollingInterval.Hourly)
	.DeleteLogFilesAfterDays(1)
	.TimestampFormat('_YYMMDD-hh-mm-ss_')
	.WriteToAds()
	.WriteToFile(filePath, fileName)
	.RunLogger();

IF bFlushCache THEN CoreLogger.FlushCache(); END_IF
	
// Test drivers
fbTime(timeAsString => ActualTime);
fbSetSystemTime(
	NETID 	:= '',
	TIMESTR := STRING_TO_SYSTEMTIME(System_time),
	START 	:= Set_system_time,
	TMOUT	:= T#2S
	);

// Execute tests
IF Persist_simple_error_message_run THEN
	Persist_simple_error_message_run := FALSE;
	Logger
		.Error(Persist_simple_error_message_data);
END_IF

IF Persist_long_error_message_run THEN
	Persist_long_error_message_run := FALSE;
	Logger
		.Error(Persist_long_error_message_data);
END_IF

IF Do_not_persist_logs_below_log_level_run THEN
	Do_not_persist_logs_below_log_level_run := FALSE;
	Logger
		.Information('Nothing');
END_IF

IF Log_message_contains_instance_path_run THEN
	Log_message_contains_instance_path_run := FALSE;
	Logger
		.Error('Nothing');
END_IF

IF Log_message_uses_correct_delimiter_run THEN
	Log_message_uses_correct_delimiter_run := FALSE;
	Logger
		.Error(Log_message_uses_correct_delimiter_data);
END_IF

IF Log_message_contains_custom_formatted_timestamp_run THEN
	Log_message_contains_custom_formatted_timestamp_run := FALSE;
	Logger
		.Error('Test message');
END_IF

IF Delete_logs_if_expired_run THEN
	Delete_logs_if_expired_run := FALSE;
	Logger
		.Error('Test message');
END_IF

IF New_logfile_is_created_if_rolling_interval_rolls_run THEN
	New_logfile_is_created_if_rolling_interval_rolls_run := FALSE;
	Logger
		.Error('Test message');
END_IF

IF Same_log_file_is_used_until_rolling_interval_rolls THEN
	Same_log_file_is_used_until_rolling_interval_rolls := FALSE;
	Logger
		.Error('Test message');
END_IF

IF Log_in_consecutive_cycles THEN
	Logger
		.Error(CONCAT('Logging cycle ', INT_TO_STRING(Cycles)));
	Cycles := Cycles + 1;
	IF Cycles >= Number_of_log_cycles THEN
		Cycles := 0;
		Log_in_consecutive_cycles := FALSE;
	END_IF
END_IF

IF Log_multiple_logs_in_one_cycle THEN
	FOR i:= 1 TO DINT_TO_INT(Number_of_logs_per_cycle) DO
		Logger.
			Error(CONCAT('Logging multiple times per cycle. Current step: ', INT_TO_STRING(i))); 
	END_FOR
	Log_multiple_logs_in_one_cycle := FALSE;
END_IF

IF Log_multiple_logs_in_multiple_cycles THEN
	IF CycleCount <= Number_of_cycles THEN	
		FOR i:= 1 TO DINT_TO_INT(Number_of_logs_per_cycle) DO
			Logger
				.AppendString('Logging multiple times per cycle. Cycle: ')
				.AppendString(DINT_TO_STRING(CycleCount))
				.AppendString(' / Step: ')
				.AppendString(INT_TO_STRING(i))
				.Error('');
		END_FOR
		CycleCount := CycleCount + 1;
	ELSE
		CycleCount := 1;
		Log_multiple_logs_in_multiple_cycles := FALSE;
	END_IF
END_IF 

Persistance_time_stays_within_bounds_F_TRIG(CLK := (Persistance_time_stays_within_bounds AND CoreLogger.Busy));
IF Persistance_time_stays_within_bounds_F_TRIG.Q THEN
	CycleCount := 1;
	Persistance_time_stays_within_bounds := FALSE;
END_IF
IF Persistance_time_stays_within_bounds THEN
	Duration_in_cylces := Duration_in_cylces + 1;
	IF CycleCount <= Number_of_cycles THEN	
		FOR i:= 1 TO DINT_TO_INT(Number_of_logs_per_cycle) DO
			Logger
				.AppendString('Logging multiple times per cycle. Cycle: ')
				.AppendString(DINT_TO_STRING(CycleCount))
				.AppendString(' / Step: ')
				.AppendString(INT_TO_STRING(i))
				.Error('');
		END_FOR
		CycleCount := CycleCount + 1;
	END_IF
END_IF


]]></ST>
    </Implementation>
    <LineIds Name="TestWrapper_NET">
      <LineId Id="402" Count="15" />
      <LineId Id="421" Count="83" />
      <LineId Id="527" Count="0" />
      <LineId Id="506" Count="11" />
      <LineId Id="528" Count="0" />
      <LineId Id="519" Count="2" />
      <LineId Id="558" Count="4" />
      <LineId Id="534" Count="1" />
      <LineId Id="551" Count="0" />
      <LineId Id="536" Count="9" />
      <LineId Id="549" Count="0" />
      <LineId Id="533" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>