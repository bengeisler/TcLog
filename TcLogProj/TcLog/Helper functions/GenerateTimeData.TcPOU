<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="GenerateTimeData" Id="{a1415746-5629-4121-889a-c1e5c1a14e0f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GenerateTimeData
VAR_OUTPUT
	timeAsFileTime : Tc2_Utilities.T_FILETIME;
	timeAsSystemTime : Tc2_Utilities.TIMESTRUCT;
	timeAsString : Tc2_System.T_MaxString;
	utcTimeAsFileTime : Tc2_Utilities.T_FILETIME;
END_VAR
VAR
	fbSystemTime : Tc2_Utilities.FB_LocalSystemTime;
	fbSystemTime1 : Tc2_System.GETSYSTEMTIME;
	fbTimeZoneInfo : Tc2_Utilities.FB_GetTimeZoneInformation;
	fbLocalTime : Tc2_Utilities.FB_SystemTimeToTzSpecificLocalTime;
	rTrigTimeValid : Tc2_Standard.R_TRIG;
	fbUTCTime : Tc2_Utilities.FB_TzSpecificLocalTimeToFileTime;
END_VAR
VAR_TEMP
	utcSystemTime : Tc2_Utilities.TIMESTRUCT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[fbSystemTime(
	sNetID	:=	'',
	bEnable := 	TRUE,
	dwCycle	:=	1,
	dwOpt	:=	1,
	tTimeout:=	DEFAULT_ADS_TIMEOUT
);

fbTimeZoneInfo(
	sNetID := '',
	bExecute := TRUE,
	tTimeout := DEFAULT_ADS_TIMEOUT);

fbUTCTime(
	in := SYSTEMTIME_TO_FILETIME(timeAsSystemTime),
	tzInfo := fbTimeZoneInfo.tzInfo);
	
timeAsSystemTime 	:=	fbSystemTime.systemTime;
timeAsFileTime 		:= 	SYSTEMTIME_TO_FILETIME(timeAsSystemTime);
timeAsString 		:= 	SYSTEMTIME_TO_STRING(timeAsSystemTime);
utcTimeAsFileTime	:= 	fbUTCTime.out;

rTrigTimeValid(CLK := fbSystemTime.bValid);
]]></ST>
    </Implementation>
    <Property Name="Done" Id="{8f1defae-bf58-4f56-90d2-4c21f4d99c0d}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY Done : BOOL]]></Declaration>
      <Get Name="Get" Id="{af33a3a4-b3f8-4a12-a02f-9f9071d422ae}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Done := rTrigTimeValid.Q;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ReplaceFormatPlaceholder" Id="{0cd85094-5af1-4c37-9111-0c2d17463a35}">
      <Declaration><![CDATA[// Replaces placeholders in format string by the actual time values
METHOD PRIVATE ReplaceFormatPlaceholder : STRING
VAR_INPUT
	Format : STRING;
	Length : INT;
	TimeType : STRING(1);
END_VAR
VAR_INST
	i : INT;
	replaceString : STRING;
	timeString : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF    TimeType = 'Y' 	THEN timeString := TO_STRING(timeAsSystemTime.wYear); 
ELSIF TimeType = 'M' 	THEN timeString := TO_STRING(timeAsSystemTime.wMonth); 
ELSIF TimeType = 'D' 	THEN timeString := TO_STRING(timeAsSystemTime.wDay); 
ELSIF TimeType = 'h' 	THEN timeString := TO_STRING(timeAsSystemTime.wHour); 
ELSIF TimeType = 'm' 	THEN timeString := TO_STRING(timeAsSystemTime.wMinute); 
ELSIF TimeType = 's' 	THEN timeString := TO_STRING(timeAsSystemTime.wSecond); 
ELSIF TimeType = 'i' 	THEN timeString := TO_STRING(timeAsSystemTime.wMilliseconds); 
ELSE
  timeString:='';
END_IF

replaceString := '';

IF Length > LEN(timeString) THEN
	FOR i:=1 TO Length - LEN(timeString) DO
		replaceString := CONCAT(replaceString, '0');
	END_FOR
	replaceString := CONCAT(replaceString, timeString);
ELSE
	replaceString := RIGHT(timeString, Length);
END_IF

ReplaceFormatPlaceholder := REPLACE(Format, replaceString, Length, FIND(Format, TimeType));]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToString" Id="{8e5c5f29-5e99-4676-80b8-ceef73719a56}">
      <Declaration><![CDATA[// Returns a formatted string containing the actual time information 
//	Y : year
//	M : month
// 	D : day
//  h : hour 
//  m : minute
//  s : second
//  i : millisecond
// 
// Example: _YYMMDD-hh:mm:ss:iii_
// => _20210812-12:30:22:123_
METHOD ToString : Tc2_System.T_MaxString
VAR_INPUT
	Format : STRING;
END_VAR
VAR_INST
	inputString : STRING;
	char : STRING(1);
  formattedString : Tc2_System.T_MaxString;  
END_VAR
VAR
	year : INT := 0;
	month : INT := 0;
	day : INT := 0;
	hour : INT := 0;
	minute : INT := 0;
	second : INT := 0;
	millisecond : INT := 0;
END_VAR
VAR CONSTANT
	VALID_FORMAT : STRING := 'YMDhms';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Parses "Format" and returns a adequatly formatted string containing the time information
inputString := Format;

WHILE LEN(inputString) > 0 DO
	char := LEFT(inputString, 1);
	
	IF    char = 'Y' THEN 	year := year + 1;
	ELSIF char = 'M' THEN	month := month + 1;
	ELSIF char = 'D' THEN	day := day + 1;
	ELSIF char = 'h' THEN	hour := hour + 1;
	ELSIF char = 'm' THEN	minute := minute + 1;
	ELSIF char = 's' THEN 	second := second + 1;
	ELSIF char = 'i' THEN 	millisecond := millisecond + 1;
	END_IF
	
	inputString := DELETE(inputString, 1, 1);
END_WHILE

formattedString := ReplaceFormatPlaceholder(Format, year, 'Y');
formattedString := ReplaceFormatPlaceholder(formattedString, month, 'M');
formattedString := ReplaceFormatPlaceholder(formattedString, day, 'D');
formattedString := ReplaceFormatPlaceholder(formattedString, hour, 'h');
formattedString := ReplaceFormatPlaceholder(formattedString, minute, 'm');
formattedString := ReplaceFormatPlaceholder(formattedString, second, 's');
formattedString := ReplaceFormatPlaceholder(formattedString, millisecond, 'i');

ToString := formattedString;


]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>