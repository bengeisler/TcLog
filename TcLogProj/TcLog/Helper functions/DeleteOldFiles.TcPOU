<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="DeleteOldFiles" Id="{53f55453-df08-4a77-a3eb-05859cd9b0ad}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK DeleteOldFiles
VAR_INPUT
	StartScan : BOOL; // Rising edge starts scan for out-of-date log files and deletes them.
	ExpirationInDays : UINT; // Files will be deleted if older than n days
	FilePath : Tc2_System.T_MaxString; // Path to files to be deleted
	FileName : Tc2_System.T_MaxString; // Only files which match this filename will be deleted
	ActualTime : Tc2_Utilities.T_FILETIME; // Actual Time 
END_VAR
VAR_OUTPUT
	Error : ST_Error; // Error information
END_VAR
VAR CONSTANT
	ONE_DAY_IN_SECONDS : LREAL := 24*3600.0;
	MAX_NUMBER_OF_FILES : UDINT := 100;
END_VAR
VAR
	state : DeleteFilesState := DeleteFilesState.Idle;
  
	fbEnum : Tc2_Utilities.FB_EnumFindFileList;
	fTrigEnumBusy : Tc2_Standard.F_TRIG;
	fbDeleteFile : Tc2_System.FB_FileDelete;
	fTrigDeleteFileBusy : Tc2_Standard.F_TRIG;
	filesList : ARRAY[1..100] OF Tc2_Utilities.ST_FindFileEntry;
	deleteFileIndex : UDINT;
	deleteFileName : Tc2_System.T_MaxString;
	eEnumCmd : Tc2_Utilities.E_EnumCmdType;
	bFileDeleted : BOOL;
END_VAR
VAR_TEMP
	timeLastWriteAccess : Tc2_Utilities.T_ULARGE_INTEGER;
	fileTimeAsULINT : Tc2_Utilities.T_ULARGE_INTEGER;
	fileTimeDifference : Tc2_Utilities.T_ULARGE_INTEGER;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// State machine to delete all due files.
// It first enumerates all files in the specified directory
// and then deletes all files that have overpassed the specified due date
CASE state OF
	DeleteFilesState.Idle:
		IF StartScan THEN
			eEnumCmd:= eEnumCmd_First;
			deleteFileIndex := 1;
			state := DeleteFilesState.SearchNextFile;
		END_IF
		
	DeleteFilesState.SearchNextFile:
		IF fTrigEnumBusy.Q THEN
			state := DeleteFilesState.WaitUntilExecutionDone;
		END_IF
		
	DeleteFilesState.WaitUntilExecutionDone:
		IF NOT fbEnum.bError THEN
			IF NOT fbEnum.bEOE THEN
				IF fbEnum.nFindFiles < MAX_NUMBER_OF_FILES THEN
					State := DeleteFilesState.SearchNextFile;
				ELSE
					eEnumCmd := eEnumCmd_Abort;
					state := DeleteFilesState.ProcessFoundFiles;
				END_IF
			ELSE
				state := DeleteFilesState.ProcessFoundFiles;
			END_IF
		ELSE
			state := DeleteFilesState.Idle;
		END_IF
		
	DeleteFilesState.ProcessFoundFiles:
		IF deleteFileIndex > fbEnum.nFindFiles THEN
			state := DeleteFilesState.Idle;
		ELSE
			state := DeleteFilesState.CheckIfFileIsDirectory;
		END_IF
		
	DeleteFilesState.CheckIfFileIsDirectory:
		IF NOT filesList[deleteFileIndex].fileAttributes.bDirectory THEN
			state := DeleteFilesState.CheckFileTime;
		ELSE
			deleteFileIndex := deleteFileIndex + 1;
			state := DeleteFilesState.ProcessFoundFiles;
		END_IF
		
	DeleteFilesState.CheckFileTime:		
		IF GetFileAgeInSeconds(ActualTime, filesList[deleteFileIndex]) > (ExpirationInDays * ONE_DAY_IN_SECONDS) THEN
			state := DeleteFilesState.DeleteFile;
		ELSE
			deleteFileIndex := deleteFileIndex + 1;
			state := DeleteFilesState.ProcessFoundFiles;
		END_IF
	
	DeleteFilesState.DeleteFile:
		deleteFileName := CONCAT(FilePath, filesList[deleteFileIndex].sFileName);
		
		IF fTrigDeleteFileBusy.Q THEN
			deleteFileIndex := deleteFileIndex + 1;
			bFileDeleted := TRUE;
			state := DeleteFilesState.FileDeleted;
		END_IF
		IF fbDeleteFile.bError THEN
			state := DeleteFilesState.Idle;
		END_IF
		
	DeleteFilesState.FileDeleted:		
		// This state is needed to generate a rising edge for FB_FileDelete
		IF NOT bFileDeleted THEN
			state := DeleteFilesState.ProcessFoundFiles;
		END_IF
		bFileDeleted := FALSE;

END_CASE

// Function blocks used in state machine

// Search files in given directory
fbEnum(sNetId := '',
       eCmd := eEnumCmd,
       sPathName := CONCAT(FilePath, CONCAT('*', FileName)),
       bExecute := (state = DeleteFilesState.SearchNextFile) OR (eEnumCmd = eEnumCmd_Abort AND state <> DeleteFilesState.Idle),
       pFindList := ADR(filesList),
       cbFindList := SIZEOF(filesList),
       tTimeout := T#10S);

fTrigEnumBusy(CLK:=fbEnum.bBusy);

// Delete files
fbDeleteFile(sNetId := '',
             sPathName := deleteFileName,
             bExecute := (state = DeleteFilesState.DeleteFile),
             tTimeout := T#10S);
				
fTrigDeleteFileBusy(CLK := fbDeleteFile.bBusy);

// Error handling
Error.Active := FALSE;
Error.Code := E_ErrorCode.None;
Error.Info := '';

IF fbEnum.bError THEN
	Error.Active := TRUE;
	Error.Code := E_ErrorCode.EnumeratingFilesInSpecifiedDirectoryFailed;
	Error.Info := CONCAT('Enumerating files in specified directory failed. Error thrown by FB_EnumFindFileList. Consult Beckhoff InfoSys. Internal Error: ', UDINT_TO_STRING(fbEnum.nErrId));
END_IF
			
IF fbDeleteFile.bError THEN
	Error.Active := TRUE;
	Error.Code := E_ErrorCode.DeletingFileFailed;
	Error.Info := CONCAT('Deleting expired log file in specified directory failed. Error thrown by FB_FileDelete. Consult Beckhoff InfoSys. Internal Error: ', UDINT_TO_STRING(fbDeleteFile.nErrId));
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>