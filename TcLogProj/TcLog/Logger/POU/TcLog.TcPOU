<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="TcLog" Id="{70fb8269-5067-405b-9fff-7631f944e2d4}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'reflection'} 
FUNCTION_BLOCK TcLog IMPLEMENTS ILog
VAR_INPUT

END_VAR
VAR_OUTPUT
END_VAR
VAR
	{attribute 'hide'} 
	logConditionSatisfied 			: BOOL;							// flag that indicates, whether log condition has been satisfied. 
																	// Logging will only be carried out it this evaluates to TRUE.
	{attribute 'hide'} 																
	logDataInitialized 				: BOOL;							// flag that indicate, whether log data has been initialized. 
																	// Necessary for configuration methods to provide a fluent interface.
	{attribute 'hide'} 																
	logData 						: T_MaxString;					// contains message to be logged.
	
	{attribute 'hide'} 
	usedLogger						: ILogCore;		// 
	
	{attribute 'instance-path'} 
    {attribute 'noinit'} 
    InstancePath 					: STRING; 						// contains instance path 
END_VAR
VAR_STAT
	SingletonInstance 				: ILogCore;						// Wires up TcLogg ("Client") to TcLogCore ("Server") (Singleton-Behaviour)
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AppendAny" Id="{13a72111-b34b-43eb-9dd9-69ff4503fdca}">
      <Declaration><![CDATA[// Appends any given data to the log string. Can be chained.
METHOD AppendAny : REFERENCE TO TcLog	
VAR_INPUT
	Data : ANY;		// Data to be appended to log string.
END_VAR
VAR
	pAnyReal : POINTER TO REAL;
	pAnyLReal: POINTER TO LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();

logData := CONCAT(logData, ANY_TO_STRING2(Data));

AppendAny REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendString" Id="{7aeade46-e7f2-45b6-b46c-fff144444876}">
      <Declaration><![CDATA[// Appends a string to the log string. Can be chained.
METHOD AppendString : REFERENCE TO TcLog		
VAR_INPUT
	Data : T_MaxString;		// Data to be appended to log string.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();

logData := CONCAT(logData, Data);
	
AppendString REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AppendVariable" Id="{67339878-c4f6-4555-96b1-10fb6c84bab0}">
      <Declaration><![CDATA[// Appends information about the given variable to the log string. 
// Can be chained.
// Example: 
// ---------------
// VAR
// 		myInt : INT := 10;
//		myVarInfo : __SYSTEM.VAR_INFO := __VARINFO(myInt);
// END_VAR
// Logger.AppendVariable(myVarInfo, myInt);
METHOD AppendVariable : REFERENCE TO TcLog		
VAR_INPUT
	VarInfo : 	__SYSTEM.VAR_INFO;		// VARINFO of variable to be appended to log string.
	Value	:	ANY;					// Value of variable to be appended to log string.
END_VAR
VAR
	Format 		: 	FB_FormatString;
	symbolName 	: 	T_MAXSTRING;
	typeName 	: 	T_MAXSTRING; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();

symbolName := VarInfo.Symbol;
typeName := VarInfo.TypeName; 

Format(
	sFormat := '%s [%s] : ',
	arg1 := F_STRING(symbolName),
	arg2 := F_STRING(typeName));
	
AppendString(Format.sOut);
AppendAny(Value);

AppendVariable REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Debug" Id="{a6ab730f-dade-4a97-bd0b-d6237fbafb52}">
      <Declaration><![CDATA[//	Logs the log string in DEBUG level
METHOD Debug : BOOL	
VAR_INPUT
	Message	:	T_MaxString;		// Message to be appended to log string.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();
IF logConditionSatisfied THEN
	IF usedLogger <> 0 THEN 
		usedLogger.LogStandardFormat(CONCAT(logData, Message), ShortenInstancePath(InstancePath), E_LogLevel.Debug); 
	ELSE
		ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(E_LogLevel.Error), 'usedLogger: No valid reference', ''); 
	END_IF
END_IF
logDataInitialized := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Error" Id="{33e3e66d-5512-4aeb-a63d-1183d4d9acad}">
      <Declaration><![CDATA[// Logs the log string in ERROR level
METHOD Error : BOOL	
VAR_INPUT
	Message	:	T_MaxString;		// Message to be appended to log string.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();
IF logConditionSatisfied THEN
	IF usedLogger <> 0 THEN 
		usedLogger.LogStandardFormat(CONCAT(logData, Message), ShortenInstancePath(InstancePath), E_LogLevel.Error); 
	ELSE
		ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(E_LogLevel.Error), 'usedLogger: No valid reference', ''); 
	END_IF
END_IF
logDataInitialized := FALSE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Fatal" Id="{4817ad2c-00f3-4ea2-9126-d711c8897cf3}">
      <Declaration><![CDATA[// Logs the log string in FATAL level
METHOD Fatal : BOOL		
VAR_INPUT
	Message	:	T_MaxString;		// Message to be appended to log string.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();
IF logConditionSatisfied THEN
	IF usedLogger <> 0 THEN 
		usedLogger.LogStandardFormat(CONCAT(logData, Message), ShortenInstancePath(InstancePath), E_LogLevel.Fatal); 
	ELSE
		ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(E_LogLevel.Error), 'usedLogger: No valid reference', ''); 
	END_IF
END_IF
logDataInitialized := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Information" Id="{ab474f28-2e54-4276-8fa1-5987c3e94a5d}">
      <Declaration><![CDATA[// Logs the log string in INFORMATION level.
METHOD Information : BOOL
VAR_INPUT
	Message	:	T_MaxString;		// Message to be appended to log string.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();
IF logConditionSatisfied THEN
	IF usedLogger <> 0 THEN 
		usedLogger.LogStandardFormat(CONCAT(logData, Message), ShortenInstancePath(InstancePath), E_LogLevel.Information); 
	ELSE
		ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(E_LogLevel.Error), 'usedLogger: No valid reference', ''); 
	END_IF
END_IF
logDataInitialized := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{9c7719d7-670f-46f3-92c8-88f67e360e00}">
      <Declaration><![CDATA[// Initializes the reference to the core logger. Should only be called once from the core logger directly.
METHOD PUBLIC Init : BOOL		
VAR_INPUT
	Ref2Core : ILogCore;	// Reference to TcLoggerCore instance.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SingletonInstance := Ref2Core;]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitializeLogData" Id="{b4d317d9-a916-4484-9cf0-3391543593aa}">
      <Declaration><![CDATA[// Necessary to provide a fluent interface of the function. 
// Has to be called at the begin of any method that returns a reference to THIS^
{attribute 'hide'}
METHOD PRIVATE InitializeLogData : BOOL		
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT logDataInitialized THEN
	logConditionSatisfied := TRUE;
	logData := '';
	logDataInitialized := TRUE;
	IF usedLogger = 0 THEN usedLogger := SingletonInstance; END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnCondition" Id="{a7892907-3646-4ffc-9ebc-1cb01c1fe466}">
      <Declaration><![CDATA[// Conditional execution of the log commant. Only executes logging when Cond = TRUE.
METHOD OnCondition : REFERENCE TO TcLog
VAR_INPUT
	Cond: BOOL;		// Logs data only if this condition evaluates to TRUE.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();

logConditionSatisfied := Cond;

OnCondition REF= THIS^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetLogger" Id="{46b10db2-eb0c-4fd5-9093-9efc1bae8abd}">
      <Declaration><![CDATA[// Initializes the reference to the core logger. Should only be called once from the core logger directly.
METHOD SetLogger : BOOL
VAR_INPUT
	Ref2Core : ILogCore;	// Reference to Core Logger
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[usedLogger := Ref2Core;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ShortenInstancePath" Id="{b60d89ff-ac15-445d-94fa-fd767b6d287a}">
      <Declaration><![CDATA[// Helper method. Shortens the instance path by omitting superfluent information
// such as concrete logger instance and plc/project names.
{attribute 'hide'}
METHOD PRIVATE ShortenInstancePath : T_MAXSTRING
VAR_INPUT
	Path 				:	T_MAXSTRING;	// Instance path to be shortened.
END_VAR
VAR
	i					:	UINT;
	shortenedPath		:	T_MAXSTRING;
	positionInString	:	INT := 0;
	positionOfLastDot	:	INT := 0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[shortenedPath := Path;

// Find last '.'
WHILE(FIND(shortenedPath, '.') > 0) DO
	positionInString := FIND(shortenedPath, '.');
	shortenedPath := DELETE(shortenedPath, positionInString+1, 0);	
	positionOfLastDot := positionOfLastDot+positionInString;
END_WHILE

shortenedPath := Path;
// Delete instantiation of this FB (obvious information)
shortenedPath := DELETE(shortenedPath, LEN(shortenedPath)-positionOfLastDot+1, positionOfLastDot);
// Delete project information
positionInString := FIND(shortenedPath, '.');
shortenedPath := DELETE(shortenedPath, positionInString+1, 0);
// Delete PLC information
positionInString := FIND(shortenedPath, '.');
shortenedPath := DELETE(shortenedPath, positionInString+1, 0);

ShortenInstancePath := shortenedPath;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToAdsLog" Id="{5fabb9f2-d1d8-47fa-9304-f009c34b3048}">
      <Declaration><![CDATA[// Logs directly to ADS log, ignoring the settings of the base logger.
METHOD ToAdsLog : BOOL
VAR_INPUT
	LogLevel : E_LogLevel;		// Log level in which message should be logged to ADS.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();

IF logConditionSatisfied THEN
	ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(LogLevel), logData, ''); 
END_IF

logDataInitialized := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ToCustomFormat" Id="{c0ece00e-4fc1-4a0f-829f-62251f71a82e}">
      <Declaration><![CDATA[// Saves custom formatted log string. No addtitional information will be added.
METHOD ToCustomFormat : BOOL
VAR_INPUT
	Message	:	T_MaxString;	// Message to be appended to log string.
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();
IF logConditionSatisfied THEN
	IF usedLogger <> 0 THEN 
		usedLogger.LogCustomFormat(CONCAT(logData, Message)); 
	ELSE
		ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(E_LogLevel.Error), 'usedLogger: No valid reference', ''); 
	END_IF
END_IF
logDataInitialized := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Warning" Id="{162d314a-1aa9-4cae-884b-e8b1bb3f4d70}">
      <Declaration><![CDATA[// Logs the log string in WARNING level
METHOD Warning : BOOL	
VAR_INPUT
	Message	:	T_MaxString;	// Message to be appended to log string.
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitializeLogData();
IF logConditionSatisfied THEN
	IF usedLogger <> 0 THEN 
		usedLogger.LogStandardFormat(CONCAT(logData, Message), ShortenInstancePath(InstancePath), E_LogLevel.Warning); 
	ELSE
		ADSLOGSTR(ADSLOG_MSGTYPE_LOG OR LogLevel_To_AdsLogMsgType(E_LogLevel.Error), 'usedLogger: No valid reference', ''); 
	END_IF
END_IF
logDataInitialized := FALSE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="TcLog">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.AppendAny">
      <LineId Id="40" Count="0" />
      <LineId Id="123" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.AppendString">
      <LineId Id="5" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.AppendVariable">
      <LineId Id="5" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="25" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.Debug">
      <LineId Id="27" Count="3" />
      <LineId Id="33" Count="3" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.Error">
      <LineId Id="18" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="28" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.Fatal">
      <LineId Id="24" Count="3" />
      <LineId Id="30" Count="3" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.Information">
      <LineId Id="27" Count="3" />
      <LineId Id="33" Count="3" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.Init">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.InitializeLogData">
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.OnCondition">
      <LineId Id="13" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.SetLogger">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.ShortenInstancePath">
      <LineId Id="52" Count="19" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.ToAdsLog">
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.ToCustomFormat">
      <LineId Id="25" Count="3" />
      <LineId Id="31" Count="3" />
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="TcLog.Warning">
      <LineId Id="22" Count="3" />
      <LineId Id="28" Count="3" />
      <LineId Id="10" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>